// Generated by CoffeeScript 1.9.3
(function() {
  var all_comments_array, append_all_comments_to_container_table, comments_table, comments_tree, get_all_comments_from_dom, organize_into_parents_with_descendants, recursive_build_tree, shuffleArray, shuffle_tree, shuffled_tree,
    slice = [].slice;

  organize_into_parents_with_descendants = function(comments_flat) {
    var head, i, len, return_array, tail, tail_element;
    if (comments_flat.length < 2) {
      return comments_flat;
    }
    head = comments_flat[0], tail = 2 <= comments_flat.length ? slice.call(comments_flat, 1) : [];
    return_array = [head];
    for (i = 0, len = tail.length; i < len; i++) {
      tail_element = tail[i];
      if (tail_element.comment_depth > return_array[return_array.length - 1].comment_depth) {
        return_array[return_array.length - 1].child_comments.push(tail_element);
      } else {
        return_array.push(tail_element);
      }
    }
    return return_array;
  };

  recursive_build_tree = function(comments) {
    var comment, comments_two_levels, i, len;
    comments_two_levels = organize_into_parents_with_descendants(comments);
    for (i = 0, len = comments_two_levels.length; i < len; i++) {
      comment = comments_two_levels[i];
      comment.child_comments = recursive_build_tree(comment.child_comments);
    }
    return comments_two_levels;
  };

  shuffleArray = function(source) {
    var i, index, randomIndex, ref, ref1;
    if (!(source.length >= 2)) {
      return source;
    }
    for (index = i = ref = source.length - 1; ref <= 1 ? i <= 1 : i >= 1; index = ref <= 1 ? ++i : --i) {
      randomIndex = Math.floor(Math.random() * (index + 1));
      ref1 = [source[randomIndex], source[index]], source[index] = ref1[0], source[randomIndex] = ref1[1];
    }
    return source;
  };

  shuffle_tree = function(source_tree) {
    var i, len, subtree, tree_with_scrambled_top_level;
    tree_with_scrambled_top_level = shuffleArray(source_tree);
    for (i = 0, len = tree_with_scrambled_top_level.length; i < len; i++) {
      subtree = tree_with_scrambled_top_level[i];
      subtree.child_comments = shuffle_tree(subtree.child_comments);
    }
    return tree_with_scrambled_top_level;
  };

  get_all_comments_from_dom = function() {
    var all_comment_nodes, all_comments_array, comment, i, len;
    all_comment_nodes = document.querySelectorAll('.comtr');
    all_comments_array = [];
    for (i = 0, len = all_comment_nodes.length; i < len; i++) {
      comment = all_comment_nodes[i];
      comment.comment_depth = comment.querySelector('.ind > img').getAttribute('width');
      comment.child_comments = [];
      all_comments_array.push(comment);
    }
    return all_comments_array;
  };

  append_all_comments_to_container_table = function(all_comments_tree, container_table) {
    var comment, i, len, results;
    results = [];
    for (i = 0, len = all_comments_tree.length; i < len; i++) {
      comment = all_comments_tree[i];
      container_table.appendChild(comment);
      results.push(append_all_comments_to_container_table(comment.child_comments, container_table));
    }
    return results;
  };

  comments_table = document.querySelector('.comment-tree > tbody');

  comments_table.style.visibility = 'hidden';

  all_comments_array = get_all_comments_from_dom();

  comments_tree = recursive_build_tree(all_comments_array);

  shuffled_tree = shuffle_tree(comments_tree);

  comments_table.innerHTML = "";

  append_all_comments_to_container_table(shuffled_tree, comments_table);

  comments_table.style.visibility = 'visible';

}).call(this);
